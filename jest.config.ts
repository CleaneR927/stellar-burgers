/**
 * For a detailed explanation regarding each configuration property, visit:
 * https://jestjs.io/docs/configuration
 */

import type { JestConfigWithTsJest } from 'ts-jest';

const config: JestConfigWithTsJest = {
  // Все импортированные модули в ваших тестах должны автоматически имитироваться
  // automock: false,

  // Остановка выполнения тестов после `n`сбоев
  // bail: 0,

  // Каталог, в котором Jest должен хранить кэшированную информацию о зависимостях
  // cacheDirectory: "C:\\Users\\clean\\AppData\\Local\\Temp\\jest",

  // Автоматически удаляет ложные вызовы, экземпляры, контексты и результаты перед каждым тестированием
  // clearMocks: false,

  // Указывает, следует ли собирать информацию о покрытии во время выполнения теста
  collectCoverage: true,

  // Массив глобальных шаблонов, указывающий набор файлов, для которых должна быть собрана информация о покрытии
  // collectCoverageFrom: undefined,

  // Каталог, в который Jest должен выводить свои файлы покрытия
  coverageDirectory: "coverage",

  // Массив строк шаблона регулярного выражения, используемых для пропуска сбора покрытия
  // coveragePathIgnorePatterns: [
  //   "\\\\node_modules\\\\"
  // ],

  // Указывает, какой поставщик услуг должен использоваться для определения кода покрытия
  coverageProvider: "v8",

  // Список имен репортеров, которые просто используются при написании репортажных отчетов
  // coverageReporters: [
  //   "json",
  //   "text",
  //   "lcov",
  //   "clover"
  // ],

  // Объект, который настраивает минимальное пороговое значение для результатов покрытия
  // coverageThreshold: undefined,

  // Путь к пользовательскому средству извлечения зависимостей
  // dependencyExtractor: undefined,

  // Позволяет при вызове устаревших API выдавать полезные сообщения об ошибках
  // errorOnDeprecated: false,

  // Конфигурация по умолчанию для поддельных таймеров
  // fakeTimers: {
  //   "enableGlobally": false
  // },

  // Принудительный сбор покрытия из игнорируемых файлов с использованием массива глобальных шаблонов
  // forceCoverageMatch: [],

  // Путь к модулю, который экспортирует асинхронную функцию, запускаемую один раз перед всеми наборами тестов
  // globalSetup: undefined,

  // Путь к модулю, который экспортирует асинхронную функцию, запускаемую один раз после всех наборов тестов
  // globalTeardown: undefined,

  // Набор глобальных переменных, которые должны быть доступны во всех тестовых средах
  // globals: {},

  // Максимальное количество рабочих мест, используемых для выполнения ваших тестов. Может быть указано в виде % или числа. Например, maxWorkers: 10% будет использовать 10% от объема вашего процессора + 1 в качестве максимального количества рабочих мест. В maxWorkers: 2 будет использоваться максимум 2 рабочих элемента.
  // maxWorkers: "50%",

  // Массив имен каталогов, в котором будет производиться рекурсивный поиск, начиная с местоположения требуемого модуля
  // moduleDirectories: [
  //   "node_modules"
  // ],

  // Массив расширений файлов, используемых вашими модулями
  // moduleFileExtensions: [
  //   "js",
  //   "mjs",
  //   "cjs",
  //   "jsx",
  //   "ts",
  //   "tsx",
  //   "json",
  //   "node"
  // ],

  // Сопоставление регулярных выражений с именами модулей или массивами имен модулей, которые позволяют использовать ресурсы с помощью одного модуля
  moduleNameMapper: {
    '@api': '<rootDir>/src/utils/burger-api.ts',
    '@slices': '<rootDir>/src/services'
  },

  // Массив строк шаблонов регулярных выражений, сопоставляемых со всеми путями к модулям, прежде чем они станут "видимыми" для загрузчика модуля
  // modulePathIgnorePatterns: [],

  // Активирует уведомления о результатах тестирования
  // notify: false,

  // Перечисление, указывающее режим уведомления. Требуется { notify: true }
  // notifyMode: "failure-change",

  // Предустановка, которая используется в качестве базовой для настройки Jest
  preset: 'ts-jest',

  // Запускайте тесты из одного или нескольких проектов
  // projects: undefined,

  // Используйте этот параметр конфигурации для добавления пользовательских отчетов в Jest
  // reporters: undefined,

  // Автоматически сбрасывайте состояние макета перед каждым тестом
  // resetMocks: false,

  // Сбрасывайте реестр модуля перед запуском каждого отдельного теста
  // resetModules: false,

  // Путь к пользовательскому распознавателю
  // resolver: undefined,

  // Автоматическое восстановление макетного состояния и реализации перед каждым тестом
  // restoreMocks: false,

  // Корневой каталог, который Jest должен сканировать на наличие тестов и модулей в нем
  // rootDir: undefined,

  // Список путей к каталогам, которые Jest должен использовать для поиска файлов в
  // roots: [
  //   "<rootDir>"
  // ],

  // Позволяет использовать пользовательский runner вместо тестового runner по умолчанию в Jest
  // runner: "jest-runner",

  // Пути к модулям, которые запускают некоторый код для настройки среды тестирования перед каждым тестированием
  // setupFiles: [],

  // Список путей к модулям, которые запускают некоторый код для настройки платформы тестирования перед каждым тестом
  // setupFilesAfterEnv: [],

  // Количество секунд, по истечении которых тест считается медленным и отображается как таковой в результатах.
  // slowTestThreshold: 5,

  // Список путей к модулям сериализатора моментальных снимков, которые Jest должен использовать для тестирования моментальных снимков
  // snapshotSerializers: [],

  // Тестовая среда, которая будет использоваться для тестирования
  // testEnvironment: "jest-environment-node",

  // Параметры, которые будут переданы в тестовую среду
  // testEnvironmentOptions: {},

  // Добавляет поле местоположения к результатам тестирования
  // testLocationInResults: false,

  // Шаблоны глобусов, которые Jest использует для обнаружения тестовых файлов
  // testMatch: [
  //   "**/__tests__/**/*.[jt]s?(x)",
  //   "**/?(*.)+(spec|test).[tj]s?(x)"
  // ],

  // Массив строк шаблона регулярного выражения, которые сопоставляются со всеми тестовыми путями, соответствующие тесты пропускаются
  // testPathIgnorePatterns: [
  //   "\\\\node_modules\\\\"
  // ],

  // Шаблон регулярного выражения или массив шаблонов, который Jest использует для обнаружения тестовых файлов
  // testRegex: [],

  // Этот параметр позволяет использовать пользовательский обработчик результатов
  // testResultsProcessor: undefined,

  // Этот параметр позволяет использовать пользовательский инструмент запуска тестов
  // testRunner: "jest-circus/runner",

  // Схема перехода от регулярных выражений к путям к трансформаторам
  transform: {
    // '^.+\\.[tj]sx?$' для обработки файлов js/ts с помощью `ts-jest`
    // '^.+\\.m?[tj]sx?$' для обработки файлов js/ts/mjs/mts с помощью `ts-jest`
    '^.+\\.tsx?$': [
      'ts-jest',
      {
        // настройки для ts-jest
      },
    ],
  },

  // Массив строк шаблонов регулярных выражений, сопоставленных со всеми путями к исходным файлам, сопоставленные файлы будут пропускать преобразование
  // transformIgnorePatterns: [
  //   "\\\\node_modules\\\\",
  //   "\\.pnp\\.[^\\\\]+$"
  // ],

  // Массив строк шаблонов регулярных выражений, которые сопоставляются со всеми модулями до того, как загрузчик модуля автоматически вернет для них макет
  // unmockedModulePathPatterns: undefined,

  // Указывает, следует ли сообщать о каждом отдельном тесте во время выполнения
  // verbose: undefined,

  // Массив шаблонов регулярных выражений, которые сопоставляются со всеми путями к исходным файлам перед повторным запуском тестов в режиме просмотра
  // watchPathIgnorePatterns: [],

  // Следует ли использовать watchman для обхода файлов
  // watchman: true,
};

export default config;
